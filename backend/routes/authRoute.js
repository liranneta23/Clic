const express = require("express")
const router = express.Router()
const Joi = require("joi")
const Jwt = require("jsonwebtoken")
const bcrypt = require("bcryptjs")

const users = require("../model/userModel")
const validateWith = require("../middleware/validation")

/*
  ---> A schema to check login email and password
*/

const schema = {
  email: Joi.string().email().required(),
  password: Joi.string().required().min(6),
}

/*
  ---> Handle Login
  1. Check the the values of the form (see middleware/validation.js)
  2. Checks database for email and password. But if does not match, returns an error.
  3. If email and password matches, then a token is generated by jsonwebtoken
  4. Finally, the token is sent back to the user, in the frontend
*/

router.post("/", validateWith(schema), async (req, res) => {
  const { email, password } = req.body

  const user = await users.findOne({ email })
  const decrytedPassword = await bcrypt.compare(password, user.password)

  if (user && decrytedPassword === true) {
    const token = Jwt.sign(
      { userId: user._id, name: user.name, email },
      "jwtPrivateKey"
    )
    res.send(token)
  } else {
    res.status(400).send({
      error: "Password or email is incorrect",
    })
  }
})

module.exports = router
